{
	"info": {
		"_postman_id": "8b0e8ef3-2318-4fa1-8fb1-04e1c6bd4808",
		"name": "RestaurantReservationAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36453885"
	},
	"item": [
		{
			"name": "CustomerAPIS",
			"item": [
				{
					"name": "Get Customers Without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customers With Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains customerId\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"customerId\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/10",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Customer not found'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Customer not found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/100",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Customer Id must be larger than 0'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Customer Id must be larger than 0\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/-1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains customerId\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"customerId\");\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let customerId = response.customerId;\r",
									"\r",
									"pm.environment.set(\"customerId\", customerId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = `user${Math.floor(Math.random() * 100000)}@example.com`;\r",
									"pm.environment.set(\"randomEmailForCreate\", randomEmail);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"{{randomEmailForCreate}}\",\r\n    \"phoneNumber\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer With Existing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is email already exists'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Email already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"amroqadadha@example.com\",\r\n    \"phoneNumber\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number validation error should be present\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.have.property(\"PhoneNumber\");\r",
									"    pm.expect(jsonData.errors.PhoneNumber).to.include(\"Phone number can't be longer than 15 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"amroqadadha@example.com\",\r\n    \"phoneNumber\": \"123456789123456789123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Customer Successfully",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = `user${Math.floor(Math.random() * 100000)}@example.com`;\r",
									"pm.environment.set(\"randomEmailForUpdate\", randomEmail);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"{{randomEmailForUpdate}}\",\r\n    \"phoneNumber\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update With Invalid Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = `user${Math.floor(Math.random() * 100000)}@example.com`;\r",
									"pm.environment.set(\"randomEmail\", randomEmail);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"123456789123456789123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with an existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"{{randomEmailForUpdate}}\",\r\n    \"phoneNumber\": \"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Name Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/firstName\",\r\n        \"value\": \"amro\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch With Invalid Name Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/lastName\",\r\n        \"value\": \"\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch with an existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/email\",\r\n        \"value\": \"{{randomEmailForUpdate}}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Customer Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/{{customerId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Customer not found'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Customer not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Customers/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Customers",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RestaurantAPIS",
			"item": [
				{
					"name": "Get Restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Restaurant Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Restaurant not found'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Restaurant not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let restaurantId = response.restaurantId;\r",
									"\r",
									"pm.environment.set(\"restaurantId\", restaurantId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Qadadha\",\r\n        \"address\": \"123 Main St\",\r\n        \"phoneNumber\": \"555-1234\",\r\n        \"openingHours\": \"9 AM - 10 PM\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crate Restaurant With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"address\": \"123 Main St\",\r\n        \"phoneNumber\": \"555-1234\",\r\n        \"openingHours\": \"9 AM - 10 PM\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Restaurant Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"QadadhaRestaurant\",\r\n        \"address\": \"123 Main St\",\r\n        \"phoneNumber\": \"555-1234\",\r\n        \"openingHours\": \"9 AM - 10 PM\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/{{restaurantId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Restaurant With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"QadadhaRestaurant\",\r\n        \"address\": \"123 Main St\",\r\n        \"phoneNumber\": \"12345678901112131415\",\r\n        \"openingHours\": \"9 AM - 10 PM\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/{{restaurantId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Restaurant Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/name\",\r\n        \"value\": \"New Restaurant\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/{{restaurantId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Restaurant with invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/name\",\r\n        \"value\": \"\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/{{restaurantId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Restaurant Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/{{restaurantId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Restaurant not found'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Restaurant not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Restaurants/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Restaurants",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TableAPIS",
			"item": [
				{
					"name": "Get Tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Table Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let tableId = response.tableId;\r",
									"\r",
									"pm.environment.set(\"tableId\", tableId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capacity\": 4,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Table With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capacity\": {{$guid}},\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Table Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capacity\": 9,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/{{tableId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"{{tableId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Table With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capacity\": {{guid}},\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/{{tableId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"{{tableId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Table Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/capacity\",\r\n        \"value\": 15\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/{{tableId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"{{tableId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Table With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/capacity\",\r\n        \"value\": 40\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/{{tableId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"{{tableId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Table Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/{{tableId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"{{tableId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Tables/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Tables",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderAPIS",
			"item": [
				{
					"name": "Get Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Order not found'\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"Order not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let orderId = response.orderId;\r",
									"\r",
									"pm.environment.set(\"orderId\", orderId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderDate\": \"2025-10-15T15:10:15.7456244\",\r\n    \"totalAmount\": 50.0,\r\n    \"employeeId\": 2,\r\n    \"reservationId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order WIth Negative Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderDate\": \"2025-10-15T15:10:15.7456244\",\r\n    \"totalAmount\": -1,\r\n    \"employeeId\": 2,\r\n    \"reservationId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderDate\": \"2025-10-15T15:10:15.7456244\",\r\n    \"totalAmount\": 50.0,\r\n    \"employeeId\": 2,\r\n    \"reservationId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order WIth Negative Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderDate\": \"2025-10-15T15:10:15.7456244\",\r\n    \"totalAmount\": -1,\r\n    \"employeeId\": 2,\r\n    \"reservationId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Order Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/totalAmount\",\r\n        \"value\": 10\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Order With Negative Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/totalAmount\",\r\n        \"value\": -1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Orders/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Orders",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderItemAPIS",
			"item": [
				{
					"name": "Get Order Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Order Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/9",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Order Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order Item Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let orderItemId = response.orderItemId;\r",
									"\r",
									"pm.environment.set(\"orderItemId\", orderItemId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 2,\r\n    \"menuItemId\": 9,\r\n    \"orderId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order Item With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": -1,\r\n    \"menuItemId\": 9,\r\n    \"orderId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Item Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 2,\r\n    \"menuItemId\": 9,\r\n    \"orderId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/{{orderItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"{{orderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Item With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": -1,\r\n    \"menuItemId\": 9,\r\n    \"orderId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/{{orderItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"{{orderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Order Item Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/quantity\",\r\n        \"value\": 10\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/{{orderItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"{{orderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Order With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/quantity\",\r\n        \"value\": -1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/{{orderItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"{{orderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/{{orderItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"{{orderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Order Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/OrderItems/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"OrderItems",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EmployeeAPIS",
			"item": [
				{
					"name": "Get Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let employeeId = response.employeeId;\r",
									"\r",
									"pm.environment.set(\"employeeId\", employeeId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Sarah\",\r\n    \"lastName\": \"Connor\",\r\n    \"position\": \"Chef\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Employee WIth Invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Sarah\",\r\n    \"lastName\": \"Connor\",\r\n    \"position\": \"Chef\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Sarah\",\r\n    \"lastName\": \"Connor\",\r\n    \"position\": \"Chef\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/{{employeeId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"{{employeeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Sarah\",\r\n    \"lastName\": \"Connor\",\r\n    \"position\": \"Chef\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/{{employeeId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"{{employeeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/firstName\",\r\n        \"value\": \"amro\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/{{employeeId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"{{employeeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Employee WIth Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/firstName\",\r\n        \"value\": \"\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/{{employeeId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"{{employeeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/{{employeeId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"{{employeeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Employees/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Employees",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MenuItemsAPIS",
			"item": [
				{
					"name": "Get MenuItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let menuItemId = response.menuItemId;\r",
									"\r",
									"pm.environment.set(\"menuItemId\", menuItemId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test@gmail.com\",\r\n    \"price\": 10.0,\r\n    \"description\": \"QAQA\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create MenuItem With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test@gmail.com\",\r\n    \"price\": -1,\r\n    \"description\": \"QAQA\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test@gmail.com\",\r\n    \"price\": 10.0,\r\n    \"description\": \"QAQA\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update MenuItem With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test@gmail.com\",\r\n    \"price\": -1\r\n    \"description\": \"QAQA\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/price\",\r\n        \"value\": \"10\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch MenuItem With inalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test@gmail.com\",\r\n    \"price\": -1,\r\n    \"description\": \"QAQA\",\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing MenuItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/MenuItems/{{menuItemId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"MenuItems",
								"{{menuItemId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReservationAPIS",
			"item": [
				{
					"name": "Get Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non Existing Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/1000",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let reservationId = response.reservationId;\r",
									"\r",
									"pm.environment.set(\"reservationId\", reservationId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reservationDate\": \"2025-01-18T15:10:15.7455927\",\r\n    \"partySize\": 8,\r\n    \"customerId\": 3,\r\n    \"tableId\": 1,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reservation With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reservationDate\": \"2025-01-18T15:10:15.7455927\",\r\n    \"partySize\": -1,\r\n    \"customerId\": 3,\r\n    \"tableId\": 1,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reservationDate\": \"2025-01-18T15:10:15.7455927\",\r\n    \"partySize\": 8,\r\n    \"customerId\": 3,\r\n    \"tableId\": 1,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reservation WIth Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reservationDate\": \"2025-01-18T15:10:15.7455927\",\r\n    \"partySize\": -1,\r\n    \"customerId\": 3,\r\n    \"tableId\": 1,\r\n    \"restaurantId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/partySize\",\r\n        \"value\": 5\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Reservation With Invalid Input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/partySize\",\r\n        \"value\": -1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existing Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:{{port}}/api/Reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"Reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let responseText = pm.response.text();\r",
							"pm.environment.set(\"token\", responseText);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Username\": \"Admin\",\r\n    \"Password\": \"Admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:{{port}}/api/Authentication/authenticate",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"Authentication",
						"authenticate"
					]
				}
			},
			"response": []
		}
	]
}